// <auto-generated />
using GladsonEF.Infra;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GladsonEF.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("GladsonEF.Domain.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompanyBusinessId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowInAppDesktop")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowInAppMobile")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowInAppWeb")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("FINANCE_DOCUMENT_TYPE", (string)null);
                });

            modelBuilder.Entity("GladsonEF.Domain.DocumentType", b =>
                {
                    b.OwnsOne("GladsonEF.Domain.Name", "Name", b1 =>
                        {
                            b1.Property<int>("DocumentTypeId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("DocumentTypeId");

                            b1.HasIndex("FullName")
                                .HasDatabaseName("idxDocumentType_Name");

                            b1.ToTable("FINANCE_DOCUMENT_TYPE");

                            b1.WithOwner()
                                .HasForeignKey("DocumentTypeId");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
